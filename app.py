from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.security import generate_password_hash
from datetime import datetime
from datetime import datetime
from flask import jsonify, request









app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # üîê ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á app = Flask(...)



BASE_DIR = os.path.abspath(os.path.dirname(__file__))
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(BASE_DIR, 'data.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class AcademicRequest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    position_requested = db.Column(db.String(100), nullable=False)
    reason = db.Column(db.Text, nullable=False)
    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
    full_name = db.Column(db.String(150), nullable=False)
    first_name = db.Column(db.String(80))
    last_name  = db.Column(db.String(80))
    faculty = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    role = db.Column(db.String(20), default='user')
    requests = db.relationship('AcademicRequest', backref='user')  # relationship ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ class ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
    
class WorkflowStep(db.Model):
    id        = db.Column(db.Integer, primary_key=True)
    user_id   = db.Column(db.Integer, db.ForeignKey('user.id'))
    order_no  = db.Column(db.Integer)         # 1-13
    title     = db.Column(db.String(150))
    is_done   = db.Column(db.Boolean, default=False)
    done_at   = db.Column(db.DateTime)
    comment   = db.Column(db.Text)
    is_visible = db.Column(db.Boolean, default=True)   

    


def recalc_after_vote(user_id):
    """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Ç‡∏±‡πâ‡∏ô 10-13 ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏±‡πâ‡∏ô 9"""

    s9  = WorkflowStep.query.filter_by(user_id=user_id, order_no=9 ).first()
    s10 = WorkflowStep.query.filter_by(user_id=user_id, order_no=10).first()
    s11 = WorkflowStep.query.filter_by(user_id=user_id, order_no=11).first()
    s12 = WorkflowStep.query.filter_by(user_id=user_id, order_no=12).first()
    s13 = WorkflowStep.query.filter_by(user_id=user_id, order_no=13).first()

    if not all([s9, s10, s11, s12, s13]):
        return                                  # ‡∏¢‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á step ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö

    # ‚îÄ‚îÄ ‡πÇ‡∏´‡∏ß‡∏ï‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 3 ‚îÄ‚îÄ
    if len(s9.experts) < 3 or any(v.approved is None for v in s9.experts):
        for st in (s10, s11, s12, s13):
            st.is_visible = False
        db.session.commit()
        return

    votes = [v.approved for v in s9.experts]    # ‡πÄ‡∏ä‡πà‡∏ô [True,False,True]

    if all(votes):                              # ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 3
        s10.is_visible = False                  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
        s11.is_visible = True                   # ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡∏ó‡πå
        s12.is_visible = False
    else:                                       # ‚ùå ‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‚â• 1
        s10.is_visible = True                   # ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Ñ.‡∏Å.‡∏Å.
        s11.is_visible = False
        s12.is_visible = True                   # ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏≠.

    s13.is_visible = True                       # ‡∏™‡∏†‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
    db.session.commit()

def create_default_steps(user_id):
    for no, title in enumerate(TITLES, 1):
        db.session.add(WorkflowStep(
            user_id    = user_id,
            order_no   = no,
            title      = title,
            is_visible = False if 10 <= no <= 13 else True
        ))
    db.session.commit()
    
#‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á10-13
@app.post('/expert_vote/<int:step_id>/<int:idx>')
def expert_vote(step_id, idx):
    ok   = bool(request.get_json().get('approved'))

    vote = ExpertVote.query.filter_by(step_id=step_id, idx=idx).first()
    if not vote:
        vote = ExpertVote(step_id=step_id, idx=idx)
        db.session.add(vote)
    vote.approved = ok
    db.session.commit()

    recalc_after_vote(vote.step.user_id)
    return jsonify(success=True)

@app.post('/expert_toggle/<int:step_id>/<int:idx>')
def expert_toggle(step_id, idx):
    done = bool(request.get_json().get('done'))
    # ‚Ä¶ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á idx ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß) ‚Ä¶
    return jsonify(success=True)



# === ROUTES ===
@app.route('/')
def index():
    return render_template('index.html')


# ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
@app.route('/admin_login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin/admin999
        if username == 'admin' and password == 'admin999':
            session.clear()
            session['username'] = 'admin'
            session['admin'] = True
            session['role']     = 'admin'
            return redirect(url_for('admin_dashboard'))

        flash("‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", "danger")

    return render_template('admin_login.html')


@app.route('/manage_users')
def manage_users():
    # ‡πÄ‡∏ä‡πá‡∏Ñ Session ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if 'role' not in session or session['role'] not in ['admin', ]:
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!", "danger")
        return redirect(url_for('admin_login'))  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin, ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    users = User.query.all()
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    return render_template('manage_users.html', users=users)


@app.route('/users/<int:user_id>/edit', methods=['GET', 'POST'])
def edit_user(user_id):
    user = User.query.get_or_404(user_id)

    if request.method == 'POST':
        user.first_name = request.form['first_name']
        user.last_name  = request.form['last_name']
        user.email      = request.form['email']
        user.faculty    = request.form['faculty']
        db.session.commit()
        flash("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
        return redirect(url_for('manage_users'))

    return render_template('edit_user.html', user=user)



















@app.route('/add_user', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')  # ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        password = request.form.get('password')
        role = request.form.get('role', 'user')

        # ‡πÄ‡∏ä‡πá‡∏Å‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user/email ‡∏ã‡πâ‡∏≥
        existing_user = User.query.filter_by(username=username).first()
        existing_email = User.query.filter_by(email=email).first()

        if existing_user:
            flash("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!", "danger")
            return redirect(url_for('add_user'))
        if existing_email:
            flash("‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!", "danger")
            return redirect(url_for('add_user'))

        # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà email ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
        new_user = User(username=username, email=email, password=password, role=role)
        db.session.add(new_user)
        db.session.commit()

        flash("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success")
        return redirect(url_for('manage_users'))

    return render_template('add_user.html')



#‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
@app.route("/user_overview")
def user_overview():
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á first_name ‡πÅ‡∏•‡∏∞ last_name
    users = (
    db.session.query(User)
    .filter(User.full_name.isnot(None), User.full_name != '')
    .all()
)

    # (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ dict latest_status / progress ‡∏Å‡πá‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    return render_template("user_overview.html", users=users)







@app.route('/admin/contact')
def admin_contact():
    if 'admin' not in session or not session.get('admin'):
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", "danger")
        return redirect(url_for('admin_login'))  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login

    messages = ContactMessage.query.all()
    return render_template('admin_contact.html', messages=messages)





@app.route('/reports')
def reports():
    if 'admin' not in session:
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!", "danger")
        return redirect(url_for('admin_login'))
    return render_template(
        'reports.html',
      
    )

# ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ì‡∏∞ ----------
FACULTY_MAP = {
    "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
    "science-health-tech":        "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
    "agri-tech":                  "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
    "liberal-arts":               "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    "edu-innovation":             "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "management-science":         "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
}

@app.template_filter("faculty_th")
def faculty_th(code):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ì‡∏∞ ‚ûú ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    return FACULTY_MAP.get(code, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")



@app.route('/user/login', methods=['GET', 'POST'])
def user_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()
        if user and user.password == password:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
            session['user_id'] = user.id
            session['username'] = user.username
            session['role'] = user.role

            # üîÅ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
            return redirect(url_for('user_dashboard'))
        
        

        return "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"

    return render_template('user_login.html')





@app.route('/dashboard')
def user_dashboard():
    user_id = session.get('user_id')
    if user_id:
        user = User.query.get(user_id)

        name_parts = user.full_name.strip().split(" ", 1)
        first_name = name_parts[0]
        last_name = name_parts[1] if len(name_parts) > 1 else ""

        faculty_map = {
            "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
            "science-health-tech": "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
            "agri-tech": "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
            "liberal-arts": "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
            "edu-innovation": "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
            "management-science": "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"
        }

        faculty_th = faculty_map.get(user.faculty, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")

        return render_template(
            'user_dashboard.html',
            username=user.username,
            first_name=first_name,
            last_name=last_name,
            faculty=faculty_th
        )
    return redirect(url_for('login'))


@app.route('/status')
def status():
    user_id = session.get('user_id')
    if not user_id:
        return redirect(url_for('user_login'))

    user = User.query.get(user_id)

    name_parts = user.full_name.strip().split(" ", 1)
    first_name = name_parts[0]
    last_name = name_parts[1] if len(name_parts) > 1 else ""

    faculty_map = {
        "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
        "science-health-tech": "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        "agri-tech": "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
        "liberal-arts": "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        "edu-innovation": "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "management-science": "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"
    }

    faculty_th = faculty_map.get(user.faculty, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")

    # üîÅ timeline steps - mock data
    steps = [
        {"title": "‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á", "is_done": True, "show_time": True, "done_at": datetime(2025, 6, 20, 9, 0)},
        {"title": "‡∏Ñ‡∏ì‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤", "is_done": True, "show_time": True, "done_at": datetime(2025, 6, 22, 14, 30)},
        {"title": "‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£", "is_done": False, "show_time": False, "done_at": None},
    ]

    return render_template("status.html",
        username=user.username,
        first_name=first_name,
        last_name=last_name,
        faculty=faculty_th,
        email=user.email,
        role=user.role,
        steps=steps
    )


@app.route('/help')
def help():
    return render_template('help.html')

from datetime import datetime

@app.route("/timeline/<int:user_id>", endpoint="timeline")
def timeline(user_id):
    user = User.query.get_or_404(user_id)

    # ‚Äî ‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ì‡∏∞ ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢ ‚Äî
    FAC_MAP = {
        "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
        "science-health-tech"        : "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        "agri-tech"                  : "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
        "liberal-arts"               : "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        "edu-innovation"             : "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "management-science"         : "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    }
    faculty_th = FAC_MAP.get(user.faculty, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")

    # ‚Äî ‡∏Ç‡∏±‡πâ‡∏ô‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå (‡πÑ‡∏°‡πà‡∏°‡∏µ DB) ‚Äî
    TITLES = [
        "‡∏á‡∏Ñ‡∏ö ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
        "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏•‡∏±‡πà‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£",
        "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏•‡∏±‡πà‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
        "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
        "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏ß.",
        "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏ß.‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏ö‡∏ó‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥",
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Ñ.‡∏Å.‡∏Å ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£(‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)",
        "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡∏ó‡∏£‡πå",
        "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏≠.",
        "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏†‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
    ]

    SHOW_TIME_STEPS = {1, 3, 5, 7, 9, 12, 13}

    # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô list[dict]
    steps = []
    for idx, title in enumerate(TITLES, start=1):
        steps.append({
            "order_no": idx,
            "title": title,
            "is_done": False,        # <-- ‡πÅ‡∏Å‡πâ True ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡πä‡∏Å‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
            "done_at": None,         # datetime.utcnow() ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "show_time": idx in SHOW_TIME_STEPS,
            "comment": "",
            "id": idx                # id ‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡πÉ‡∏ô HTML
        })

    return render_template(
        "timeline.html",
        user=user,
        faculty_th=faculty_th,
        steps=steps,
        show_kkk=True              # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô 10 ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á False
    )
   
   
   
   
    
# ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏±‡πâ‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á) : { step_id : {"done":bool , "done_at":datetime|None} }
STEP_STATE = {}
TIME_STEPS = {1, 3, 5, 7, 9, 12, 13}

#‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á3‡∏Ñ‡∏ô
STEP_STATE   = {}                # ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö is_done / done_at
EXPERT_STATE = {}                # ‡πÉ‡∏´‡∏°‡πà : { step_id : [False, False, False] }

#‡∏ï‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á3‡∏Ñ‡∏ô
@app.post("/toggle_expert/<int:step_id>/<int:index>")
def toggle_expert(step_id, index):
    # index = 0,1,2  (‡πÅ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1-3)
    data   = request.get_json()
    done   = bool(data.get("done"))

    state  = EXPERT_STATE.setdefault(step_id, [False, False, False])
    state[index] = done

    return jsonify(success=True)



#‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
@app.post("/toggle_step/<int:step_id>")
def toggle_step(step_id):
    data = request.get_json()
    done = bool(data.get("done"))

    state = STEP_STATE.setdefault(step_id, {"done": False, "done_at": None})
    state["done"] = done

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏ä‡∏ß‡πå
    if done and step_id in TIME_STEPS:
        state["done_at"] = datetime.utcnow()
    else:
        state["done_at"] = None

    done_at_str = (state["done_at"].strftime("%d/%m/%Y %H:%M")
                   if state["done_at"] else "")

    return jsonify(success=True, done_at=done_at_str)








@app.route('/admin_dashboard')
def admin_dashboard():
    return render_template('admin_dashboard.html')


@app.route('/register', methods=['GET', 'POST'])
def register_user():
    if request.method == 'POST':
        # ---------- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ----------
        username    = request.form['username']
        raw_pass    = request.form['password']
        email       = request.form['email']
        first_name  = request.form['first_name']
        last_name   = request.form['last_name']
        faculty     = request.form['faculty']

        # ---------- ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥ ----------
        if User.query.filter_by(username=username).first():
            return "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô"

        # ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á record ----------
        new_user = User(
            username    = username,
            password    = generate_password_hash(raw_pass),   # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
            first_name  = first_name,
            last_name   = last_name,
            full_name   = f"{first_name} {last_name}".strip(),   # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö
            faculty     = faculty,
            email       = email,
            role        = 'user'
        )

        db.session.add(new_user)
        db.session.commit()

        return redirect(url_for('user_login'))

    # ---------- GET ----------
    return render_template('register_user.html')










@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('user_login'))





if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
