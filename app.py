from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.security import generate_password_hash
from datetime import datetime
from datetime import datetime
from flask import jsonify, request
import pytz
from datetime import datetime
from datetime import timezone         
from flask_login import UserMixin
tz_bkk = pytz.timezone("Asia/Bangkok")
from flask_login import LoginManager, login_required, login_user, logout_user, current_user
from datetime import timedelta  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import timedelta





# app.py (‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á config)
from flask_mail import Mail, Message
from flask_login import (
    LoginManager,          # ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    UserMixin,             # mixin ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• User
    login_required,
    login_user,
    logout_user,
    current_user
)





import re                                          # ‚Üê ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ import

# Regex ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö 10-15 ‡∏´‡∏•‡∏±‡∏Å ‡∏à‡∏∞‡∏°‡∏µ +, ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, - ‡∏Å‡πá‡πÑ‡∏î‡πâ
PHONE_PATTERN = re.compile(r'^\+?[\d\s\-]{10,15}$')






# -------------------- 1)  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å route) --------------------
TITLES = [
    "‡∏á‡∏Ñ‡∏ö ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏•‡∏±‡πà‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£",
    "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏•‡∏±‡πà‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
    "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
    "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏ß.",
    "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏ß.‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏ö‡∏ó‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥",
    "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Ñ.‡∏Å.‡∏Å ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£(‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)",
    "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡∏ó‡πå",
    "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏Å.‡∏û.‡∏≠.",
    "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏†‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
]

SHOW_TIME_STEPS = {1, 3, 5, 7, 9, 12, 13}


def ensure_workflow(user_id):
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°
    if WorkflowStep.query.filter_by(user_id=user_id).first():
        return

    for no, title in enumerate(TITLES, 1):
        db.session.add(
            WorkflowStep(
                user_id    = user_id,
                order_no   = no,
                title      = title,
                is_visible = False if 10 <= no <= 13 else True
            )
        )
    db.session.commit()





app = Flask(__name__, template_folder='templates')
app.secret_key = 'your_secret_key_here'
# ‚¨áÔ∏è  ‡∏™‡∏£‡πâ‡∏≤‡∏á LoginManager ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö app
login_manager = LoginManager(app)
login_manager.login_view = "user_login"  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ endpoint ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
login_manager.login_message_category = "warning"

app.permanent_session_lifetime = timedelta(days=365)  # ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ session ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏≤‡∏ô 1 ‡∏õ‡∏µ
app.session_cookie_name = 'your_session_cookie_name'  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ session









BASE_DIR = os.path.abspath(os.path.dirname(__file__))
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(BASE_DIR, 'data.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)





class AcademicRequest(db.Model):
    __tablename__ = "academic_request"

    id                 = db.Column(db.Integer, primary_key=True)
    name               = db.Column(db.String(100), nullable=False)
    position_requested = db.Column(db.String(100), nullable=False)
    reason             = db.Column(db.Text,        nullable=False)
    submitted_at       = db.Column(db.DateTime,    default=datetime.utcnow)
    user_id            = db.Column(
        db.Integer,
        db.ForeignKey("user.id", ondelete="CASCADE"),
        nullable=False
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  WorkflowStep
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class WorkflowStep(db.Model):
    __tablename__ = "workflow_step"

    id        = db.Column(db.Integer, primary_key=True)
    user_id   = db.Column(
        db.Integer,
        db.ForeignKey("user.id", ondelete="CASCADE"),
        nullable=False
    )
    order_no  = db.Column(db.Integer)           # 1-13
    title     = db.Column(db.String(150))
    is_done   = db.Column(db.Boolean,  default=False)
    done_at   = db.Column(db.DateTime)
    comment   = db.Column(db.Text)
    is_visible = db.Column(db.Boolean, default=True)

    # ‚ñº ExpertVote ‡∏•‡∏π‡∏Å ‡πÜ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô
    experts = db.relationship(
        "ExpertVote",
        backref="step",
        cascade="all, delete-orphan",
        lazy="dynamic"
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  ExpertVote
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class ExpertVote(db.Model):
    __tablename__ = "expert_vote"

    id       = db.Column(db.Integer, primary_key=True)
    step_id  = db.Column(
        db.Integer,
        db.ForeignKey("workflow_step.id", ondelete="CASCADE"),
        nullable=False
    )
    idx      = db.Column(db.Integer)   # 0-2  (‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á 1-3)
    approved = db.Column(db.Boolean)   # True / False / None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  User
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class User(db.Model, UserMixin):
    __tablename__ = "user"

    id        = db.Column(db.Integer, primary_key=True)
    username  = db.Column(db.String(80),  unique=True, nullable=False)
    password  = db.Column(db.String(128), nullable=False)   # ‡πÄ‡∏Å‡πá‡∏ö hash ‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏ß ‡πÜ
    full_name = db.Column(db.String(150), nullable=False)
    first_name = db.Column(db.String(80))
    last_name  = db.Column(db.String(80))
    faculty    = db.Column(db.String(100), nullable=False)
    email      = db.Column(db.String(120), unique=True, nullable=False)
    role       = db.Column(db.String(20),  default="user")
    phone      = db.Column(db.String(20))   # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

    # ‚ñº ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡∏°‡∏µ cascade)
    requests = db.relationship(
        "AcademicRequest",
        backref="user",
        cascade="all, delete-orphan",
        lazy="dynamic"
    )
    workflow_steps = db.relationship(
        "WorkflowStep",
        backref="user",
        cascade="all, delete-orphan",
        lazy="dynamic"
    )
     

#‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≠‡∏ô‡πÄ‡πÄ‡∏ó‡πâ‡∏Ñ‡∏Ñ

class ContactMessage(db.Model):
    __tablename__ = "contact_message"

    id         = db.Column(db.Integer, primary_key=True)
    subject    = db.Column(db.String(200), nullable=False)
    message    = db.Column(db.Text,        nullable=False)
    created_at = db.Column(db.DateTime,    default=datetime.utcnow)

    # FK ‡πÑ‡∏õ‡∏¢‡∏±‡∏á user
    user_id    = db.Column(db.Integer,
                           db.ForeignKey("user.id", ondelete="CASCADE"),
                           nullable=False)
    replies = db.relationship(
    'ContactReply',
    backref='contact',
    cascade='all, delete-orphan',
    lazy='dynamic'
)


    # ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å contact.user ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    user = db.relationship("User", backref="contact_messages")
    
class ContactReply(db.Model):
    __tablename__ = "contact_reply"

    id          = db.Column(db.Integer, primary_key=True)
    contact_id  = db.Column(                  # FK ‡πÑ‡∏õ ContactMessage
        db.Integer, db.ForeignKey("contact_message.id", ondelete="CASCADE"),
        nullable=False
    )
    body        = db.Column(db.Text, nullable=False)
    created_at  = db.Column(db.DateTime, default=datetime.utcnow)

    # (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏ï‡∏≠‡∏ö) ‚ûú FK ‡πÑ‡∏õ User
    admin_id    = db.Column(db.Integer, db.ForeignKey("user.id"))
    admin       = db.relationship("User", lazy="joined")

    
    


    


def recalc_after_vote(user_id):
    s9  = WorkflowStep.query.filter_by(user_id=user_id, order_no=9).first()
    s10 = WorkflowStep.query.filter_by(user_id=user_id, order_no=10).first()
    s11 = WorkflowStep.query.filter_by(user_id=user_id, order_no=11).first()
    s12 = WorkflowStep.query.filter_by(user_id=user_id, order_no=12).first()
    s13 = WorkflowStep.query.filter_by(user_id=user_id, order_no=13).first()

    # ----- ‡πÇ‡∏´‡∏ß‡∏ï‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 3 -----
    if s9.experts.count() < 3 or any(v.approved is None for v in s9.experts):
        for st in (s10, s11, s12, s13):
            st.is_visible = False
        db.session.commit()
        return

    votes = [v.approved for v in s9.experts]          # [True, False, True] ‚Ä¶

    if all(votes):                                    # ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô 3/3
        s10.is_visible = False
        s11.is_visible = True
        s12.is_visible = False
    else:                                             # ‚ùå ‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
        s10.is_visible = True
        s11.is_visible = False
        s12.is_visible = True

    s13.is_visible = True                             # ‡∏™‡∏†‡∏≤ ‡∏°.
    db.session.commit()


def create_default_steps(user_id):
    for no, title in enumerate(TITLES, 1):
        db.session.add(WorkflowStep(
            user_id    = user_id,
            order_no   = no,
            title      = title,
            is_visible = False if 10 <= no <= 13 else True
        ))
    db.session.commit()
    
#‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á10-13
@app.post('/expert_vote/<int:step_id>/<int:idx>')
def expert_vote(step_id, idx):
    ok   = bool(request.get_json().get('approved'))

    vote = ExpertVote.query.filter_by(step_id=step_id, idx=idx).first()
    if not vote:
        vote = ExpertVote(step_id=step_id, idx=idx)
        db.session.add(vote)
    vote.approved = ok
    db.session.commit()

    recalc_after_vote(vote.step.user_id)
    return jsonify(success=True)

@app.post('/expert_toggle/<int:step_id>/<int:idx>')
def expert_toggle(step_id, idx):
    done = bool(request.get_json().get('done'))
    # ‚Ä¶ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á idx ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß) ‚Ä¶
    return jsonify(success=True)

@app.template_filter("th_time")
def th_time(dt):
    return dt.astimezone(bangkok).strftime("%d/%m/%Y %H:%M")


# === ROUTES ===
@app.route('/')
def index():
    return render_template('index.html')


#‡∏ï‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á3‡∏Ñ‡∏ô
@app.post("/toggle_expert/<int:step_id>/<int:index>")
def toggle_expert(step_id, index):
    # index = 0,1,2  (‡πÅ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1-3)
    data   = request.get_json()
    done   = bool(data.get("done"))

    state  = EXPERT_STATE.setdefault(step_id, [False, False, False])
    state[index] = done

    return jsonify(success=True)






@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))



#‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
@app.post("/toggle_step/<int:step_id>")
def toggle_step(step_id):
    data = request.get_json()
    done = bool(data.get("done"))

    step = WorkflowStep.query.get_or_404(step_id)
    step.is_done = done

    # ‡∏ñ‡πâ‡∏≤ step ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏ß‡∏•‡∏≤
    if done and step.order_no in {1,3,5,7,9,12,13}:
        step.done_at = datetime.utcnow()      # ‡∏´‡∏£‡∏∑‡∏≠ datetime.now()
    else:
        step.done_at = None

    db.session.commit()

    return jsonify(
        success=True,
        done_at = step.done_at.strftime("%d/%m/%Y %H:%M") if step.done_at else ""
    )




# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route('/admin_login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin/admin999
        if username == 'admin' and password == 'admin999':
            session.clear()

            # ‚ú® 1) ‡∏î‡∏∂‡∏á record ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å DB (‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠) ‚ú®
            admin_user = User.query.filter_by(username='admin').first()
            if not admin_user:
                admin_user = User(
                    username = 'admin',
                    full_name = 'Admin',
                    password = 'admin999',
                    role = 'admin',
                    email = 'admin@example.com',
                    faculty = '-'
                )
                db.session.add(admin_user)
                db.session.commit()

            # ‚ú® 2) ‡πÄ‡∏Å‡πá‡∏ö user_id, role, flag ‡∏•‡∏á session ‚ú®
            session['user_id']  = admin_user.id      # ‚Üê ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
            session['username'] = 'admin'
            session['role']     = 'admin'
            session['admin']    = True

            return redirect(url_for('admin_dashboard'))

        flash("‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", "danger")

    return render_template('admin_login.html')








@app.route('/manage_users')
def manage_users():
    # ‡πÄ‡∏ä‡πá‡∏Ñ Session ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if 'role' not in session or session['role'] not in ['admin', ]:
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!", "danger")
        return redirect(url_for('admin_login'))  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin, ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    users = User.query.all()
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    return render_template('manage_users.html', users=users)


@app.route('/users/<int:user_id>/edit', methods=['GET', 'POST'])
def edit_user(user_id):
    user = User.query.get_or_404(user_id)

    if request.method == 'POST':
        user.first_name = request.form['first_name']
        user.last_name  = request.form['last_name']
        user.full_name  = f"{user.first_name} {user.last_name}".strip()
        user.email      = request.form['email']
        user.faculty    = request.form['faculty']

        new_password     = request.form.get('password')
        current_password = request.form.get('current_password')

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        if new_password:
            if not current_password:
                flash("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "danger")
                return redirect(url_for('edit_user', user_id=user.id))

            if current_password != user.password:
                flash("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "danger")
                return redirect(url_for('edit_user', user_id=user.id))

            user.password = new_password  # ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô plain text ‡∏≠‡∏¢‡∏π‡πà

        db.session.commit()
        flash("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
        return redirect(url_for('manage_users'))

    return render_template('edit_user.html', user=user)






@app.route('/add_user', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        username    = request.form.get('username')
        email       = request.form.get('email')
        password    = request.form.get('password')
        role        = request.form.get('role', 'user')
        first_name  = request.form.get('first_name')
        last_name   = request.form.get('last_name')
        faculty     = request.form.get('faculty')
        full_name   = f"{first_name} {last_name}".strip()  # üü¢ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å

        # ‡πÄ‡∏ä‡πá‡∏Å‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user/email ‡∏ã‡πâ‡∏≥
        if User.query.filter_by(username=username).first():
            flash("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!", "danger")
            return redirect(url_for('add_user'))
        if User.query.filter_by(email=email).first():
            flash("‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!", "danger")
            return redirect(url_for('add_user'))

        new_user = User(
            username   = username,
            email      = email,
            password   = password,
            role       = role,
            first_name = first_name,
            last_name  = last_name,
            full_name  = full_name,  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ!
            faculty    = faculty
        )
        db.session.add(new_user)
        db.session.commit()

        flash("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success")
        return redirect(url_for('manage_users'))

    return render_template('add_user.html')




#‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    # üîê ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if session.get('role') != 'admin':
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "danger")
        return redirect(url_for('manage_users'))

    user = User.query.get_or_404(user_id)
    db.session.delete(user)          # cascade ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    db.session.commit()
    flash(f"üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user.username} ‡πÅ‡∏•‡πâ‡∏ß", "success")
    return redirect(url_for('manage_users'))







#‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
# -----  contact (user side)  ---------------------------------
@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        subject = request.form.get('subject', '').strip()
        message = request.form['message'].strip()

        if not message:
            flash("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "danger")
            return redirect(url_for('contact'))

        db.session.add(ContactMessage(
            subject   = subject or "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)",
            message   = message,
            user_id   = session.get('user_id')          # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        ))
        db.session.commit()
        flash("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", "success")
        return redirect(url_for('contact'))

    return render_template('contact.html')















@app.template_filter("th_time")
def th_time(dt, fmt="%d/%m/%Y %H:%M"):
    if not dt:
        return ""
    if dt.tzinfo is None:           # ‚Üê ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≤ naive
        dt = dt.replace(tzinfo=timezone.utc)
    th = pytz.timezone("Asia/Bangkok")
    return dt.astimezone(th).strftime(fmt)





#‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
@app.route("/user_overview")
def user_overview():
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á first_name ‡πÅ‡∏•‡∏∞ last_name
    users = (
    db.session.query(User)
    .filter(User.full_name.isnot(None), User.full_name != '')
    .all()
)

    # (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ dict latest_status / progress ‡∏Å‡πá‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    return render_template("user_overview.html", users=users)







@app.route('/admin/contact')
def admin_contact():
    if 'admin' not in session or not session.get('admin'):
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", "danger")
        return redirect(url_for('admin_login'))  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login

    messages = ContactMessage.query.all()
    return render_template('admin_contact.html', messages=messages,pytz=pytz)





@app.route('/reports')
def reports():
    if 'admin' not in session:
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!", "danger")
        return redirect(url_for('admin_login'))
    return render_template(
        'reports.html',
      
    )

# ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ì‡∏∞ ----------
FACULTY_MAP = {
    "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
    "science-health-tech":        "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
    "agri-tech":                  "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
    "liberal-arts":               "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    "edu-innovation":             "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "management-science":         "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
}

@app.template_filter("faculty_th")
def faculty_th(code):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ì‡∏∞ ‚ûú ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    return FACULTY_MAP.get(code, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")



@app.route('/user/login', methods=['GET', 'POST'])
def user_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()
        if user and user.password == password:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
            session['user_id'] = user.id
            session['username'] = user.username
            session['role'] = user.role

            # üîÅ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
            return redirect(url_for('user_dashboard'))
        
        return "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"

    return render_template('user_login.html')  # ‡πÉ‡∏ä‡πâ template ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID

@app.route('/dashboard')
def user_dashboard():
    user_id = session.get('user_id')
    if user_id:
        user = User.query.get(user_id)

        name_parts = user.full_name.strip().split(" ", 1)
        first_name = name_parts[0]
        last_name = name_parts[1] if len(name_parts) > 1 else ""

        faculty_map = {
            "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
            "science-health-tech": "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
            "agri-tech": "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
            "liberal-arts": "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
            "edu-innovation": "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
            "management-science": "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"
        }

        faculty_th = faculty_map.get(user.faculty, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")

        return render_template(
            'user_dashboard.html',
            username=user.username,
            first_name=first_name,
            last_name=last_name,
            faculty=faculty_th
        )

    # ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 'user_login' ‡πÅ‡∏ó‡∏ô 'user_login.html'
    return redirect(url_for('user_login'))  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 'user_login' ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ endpoint





#‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™ user
@app.route('/change_password', methods=['GET', 'POST'])
def change_password():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    user = User.query.get(session['user_id'])

    if request.method == 'POST':
        old_password = request.form['old_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if user.password != old_password:
            flash("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!", "danger")
            return redirect(url_for('change_password'))

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if new_password != confirm_password:
            flash("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!", "danger")
            return redirect(url_for('change_password'))

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        user.password = new_password
        db.session.commit()

        flash("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success")
        return redirect(url_for('user_dashboard'))

    return render_template('change_password.html')












@app.route('/status')
def status():
    user_id = session.get('user_id')
    if not user_id:
        return redirect(url_for('user_login'))

    user = User.query.get_or_404(user_id)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á workflow ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    ensure_workflow(user.id)
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï visibility ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏±‡πâ‡∏ô 9
    recalc_after_vote(user.id)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà is_visible=True
    steps = (WorkflowStep.query
             .filter_by(user_id=user.id, is_visible=True)
             .order_by(WorkflowStep.order_no)
             .all())

    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ show_time
    for st in steps:
        st.show_time = st.order_no in SHOW_TIME_STEPS

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞
    faculty_map = {
        "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
        "science-health-tech":        "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        "agri-tech":                  "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
        "liberal-arts":               "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        "edu-innovation":             "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "management-science":         "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    }
    faculty_th = faculty_map.get(user.faculty, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")

    return render_template(
        "status.html",
        username=user.username,
        user=user,
        first_name=user.first_name,
        last_name=user.last_name,
        faculty=faculty_th,
        email=user.email,
        role=user.role,
        phone=user.phone,
        steps=steps   # ‡∏™‡πà‡∏á list[WorkflowStep] ‡∏ó‡∏µ‡πà‡∏°‡∏µ st.show_time ‡πÅ‡∏•‡πâ‡∏ß
    )


@app.route('/help')
def help():
    return render_template('help.html')

from datetime import datetime

SHOW_TIME_STEPS = {1, 3, 5, 7, 9, 12, 13}   # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏ß‡∏•‡∏≤



@app.route("/timeline/<int:user_id>", endpoint="timeline")
def timeline(user_id):
    user = User.query.get_or_404(user_id)

    # ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ----------
    ensure_workflow(user.id)

    # ---------- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ visibility ‡πÉ‡∏´‡∏°‡πà ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏±‡πâ‡∏ô 9 ----------
    recalc_after_vote(user.id)   # <- ‡πÄ‡∏ï‡∏¥‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô query

    # ---------- ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå ----------
    steps = (WorkflowStep.query
             .filter_by(user_id=user.id, is_visible=True)
             .order_by(WorkflowStep.order_no)
             .all())

    # ‚òÖ‚òÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ step ‚òÖ‚òÖ
    for st in steps:
        st.show_time = st.order_no in SHOW_TIME_STEPS  # True / False

    # ---------- ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ì‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ----------
    FAC_MAP = {
        "engineering-industrial-tech": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
        "science-health-tech": "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        "agri-tech": "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
        "liberal-arts": "‡∏®‡∏¥‡∏•‡∏õ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        "edu-innovation": "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "management-science": "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"
    }
    faculty_th = FAC_MAP.get(user.faculty, "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞")

    return render_template(
        "timeline.html",
        user=user,
        faculty_th=faculty_th,
        steps=steps,    # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ DB ‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á is_visible ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    )
    




@app.route('/admin_dashboard')
def admin_dashboard():
    return render_template('admin_dashboard.html')





@app.route('/register', methods=['GET', 'POST'])
def register_user():
    if request.method == 'POST':
        
        print("DEBUG FORM:", request.form.to_dict())
        # ----- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° -----
        username   = request.form['username'].strip()
        raw_pass   = request.form['password']         #  ‚ùó ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        email      = request.form['email'].lower().strip()
        first_name = request.form['first_name'].strip()
        last_name  = request.form['last_name'].strip()
        faculty    = request.form['faculty']
        phone = request.form.get('phone', '').strip()   # ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÇ‡∏¢‡∏ô KeyError


        # ----- ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥ -----
        if User.query.filter_by(username=username).first():
            return "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
        if User.query.filter_by(email=email).first():
            return "‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
        if User.query.filter_by(phone=phone).first():
            return "‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"

        # ----- ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå -----
        if not PHONE_PATTERN.match(phone):
            return "‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô 0 ‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß 9‚Äì10 ‡∏´‡∏•‡∏±‡∏Å)"

        # ----- ‡∏™‡∏£‡πâ‡∏≤‡∏á record -----
        new_user = User(
            username   = username,
            password   = raw_pass,                      # ‡πÉ‡∏ä‡πâ‡∏î‡∏¥‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            first_name = first_name,
            last_name  = last_name,
            full_name  = f"{first_name} {last_name}".strip(),
            faculty    = faculty,
            email      = email,
            phone      = phone,                         # ‚Üê ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
            role       = 'user'
        )

        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('user_login'))

    # ----- GET -----
    return render_template('register_user.html')


#‡∏ï‡∏±‡∏ß‡∏û‡∏ß‡∏Å‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
# app.py  ‡∏´‡∏£‡∏∑‡∏≠ blueprint admin.py


# ----------------------------
#  /admin/contact/reply
# ----------------------------
@app.route('/admin/contact/reply', methods=['GET', 'POST'])
def reply_contact():
    if not session.get("admin"):
        flash("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", "danger")
        return redirect(url_for("admin_login", next=request.path))

    # ---------- POST ----------
    if request.method == "POST":
        msg_id = request.form["msg_id"]
        body   = request.form["body"].strip()

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏à‡∏≤‡∏Å session (‡∏´‡∏£‡∏∑‡∏≠ current_user.id ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Flask-Login)
        admin_id = session.get('user_id')          # <----- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!

        db.session.add(ContactReply(
            contact_id = msg_id,
            body       = body,
            admin_id   = admin_id                  # <----- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
        ))
        db.session.commit()

        flash("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "success")
        return redirect(url_for("reply_contact", msg_id=msg_id))

    # ---------- GET ----------
    msg_id  = request.args.get("msg_id", type=int)
    msg     = ContactMessage.query.get_or_404(msg_id)
    replies = (msg.replies
                  .order_by(ContactReply.created_at.asc())
                  .all())
    return render_template("admin_reply.html", msg=msg, replies=replies)




@app.route('/user/reply/<int:msg_id>', methods=['POST'])
def user_reply(msg_id):
    if 'user_id' not in session:
        flash("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô", "danger")
        return redirect(url_for('user_login'))

    msg = ContactMessage.query.get_or_404(msg_id)

    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
    if msg.user_id != session['user_id']:
        flash("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ", "danger")
        return redirect(url_for('user_replies'))

    body = request.form.get('body', '').strip()
    if not body:
        flash("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "danger")
        return redirect(url_for('user_replies'))

    db.session.add(ContactReply(contact_id=msg.id, body=body))
    db.session.commit()

    flash("‚úÖ ‡∏™‡πà‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "success")
    return redirect(url_for('user_replies'))





##‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
# ‚îÄ‚îÄ‚îÄ decorator ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‚îÄ‚îÄ‚îÄ
from functools import wraps
def admin_only(f):
    @wraps(f)
    def wrap(*a, **kw):
        if session.get('admin'):
            return f(*a, **kw)
        flash('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', 'danger')
        return redirect(url_for('admin_login', next=request.path))
    return wrap


@app.route('/admin/contact/<int:msg_id>/delete', methods=['POST'])
@admin_only               # ‡∏´‡∏£‡∏∑‡∏≠ @login_required ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Flask-Login
def delete_contact(msg_id):
    msg = ContactMessage.query.get_or_404(msg_id)

    db.session.delete(msg)
    db.session.commit()

    flash("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß", "success")

    # üü¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ return ‡πÄ‡∏™‡∏°‡∏≠
    return redirect(url_for('admin_contact'))




@app.route('/user/replies')
def user_replies():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not session.get('user_id'):
        flash("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô", "danger")
        return redirect(url_for('user_login'))  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á
    msgs = (ContactMessage.query
            .filter_by(user_id=session['user_id'])  # ‡πÉ‡∏ä‡πâ session['user_id'] ‡πÅ‡∏ó‡∏ô current_user.id
            .order_by(ContactMessage.created_at.desc())
            .all())

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
    return render_template(
        'user_replies.html',
        msgs=msgs,
        ContactReply=ContactReply
    )


















@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('user_login'))





if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)